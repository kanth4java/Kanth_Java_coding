LRU CaChe:(Least Recently Used)
 When performing LRU caching, you always throw out the data that was least recently used.
 
MRU Cache:(Most Recently Used) 
When performing LRU caching, you always throw out the data that was Most recently used
 
Example that supports both LRU and MRU:

EvictionStrategy.java


public enum EvictionStrategy {

    LRU, MRU
}

Icache.java

public interface Icache {
	 public void put(Object key, Object val);
	 
	    public Object get(Object key);
	 
	    public void invalidate(Object key);
	 
	    public void printKeyOrder();
}

CustomCache.java

package com.cache.org;

import java.util.HashMap;
import java.util.LinkedList;

public abstract class CustomCache implements Icache {
	int cacheSize;
    HashMap map;
    LinkedList list;
 
    public CustomCache(int cacheSize) {
        this.cacheSize = cacheSize;
        map = new HashMap(cacheSize);
        list = new LinkedList();
    }
 
    public abstract void put(Object key, Object val);
 
    public abstract Object get(Object key);
 
    public void invalidate(Object key) {
        list.remove(key);
        map.remove(key);
    }
 
    public void printKeyOrder() {
        System.out.println("KeyOrder() " + list + " Cache content: " + map);
    }
 
    public void prune()// removes the tail
    {
        Object key = list.removeLast();
        map.remove(key);
    }
}

CacheFactory.java

public class CacheFactory {
	public static Icache newInstance(int cacheSize, EvictionStrategy strategy) {
        if (EvictionStrategy.LRU == strategy) 
        {
            return new LRUCacheExample(cacheSize);
        } 
        else if (EvictionStrategy.MRU == strategy) {
            return new MRUCacheExample(cacheSize);
        } 
        else {
            throw new RuntimeException("Invalid EvictionStrategy");
        }
 
}
}

LRUCacheExample.java

package com.cache.org;

public class LRUCacheExample extends CustomCache {

	public LRUCacheExample(int cacheSize) {
		super(cacheSize);
	
	}

	@Override
	public void put(Object key, Object val) {
		   // check if pruning is needed
        if (list.size() == this.cacheSize) {
            this.prune();
        }
        list.addFirst(key);// always add element at first of list
        map.put(key, val);
    }
	
	//consider a example of list 
	@Override
	public Object get(Object key) {
		boolean res = list.remove(key);
        if (res) {
            list.addFirst(key);
            return map.get(key);
        }
        return null;
    }
	}

MRUCacheExample.java


package com.cache.org;

public class MRUCacheExample extends CustomCache {

	public MRUCacheExample(int cacheSize) {
		super(cacheSize);
		
	}

	@Override
	public void put(Object key, Object val) {
		 if (list.size() == this.cacheSize) {
	            this.prune();
	        }
	        list.addLast(key);
	        map.put(key, val);
		
	}

	@Override
	public Object get(Object key) {
		 boolean res = list.remove(key);
	        if (res) {
	            list.addLast(key);// always add element at Last of list
	            return map.get(key);
	        }
	        return null;
	    }

}

