2)Please create a class for the below and send it,
We have a table which has 4 columns as id, name, phone and address.
You need to have a method which will return me the data.
Create a method where you can hard code the data and print the details.
The main aim of above example is how you use data structure.

Example Without using Database Connection
Person.Java
//Class with 4 Columns
package com.Test.Challenge1;

public class Person {
	
	private int id;
	private String name;
	private String phone;
	private String address;
	
	public Person(){
	}
	

	public Person(int id, String name, String phone, String address) {
		
		this.id = id;
		this.name = name;
		this.phone = phone;
		this.address = address;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}

	public String getPhone() {
		return phone;
	}
	public void setPhone(String phone) {
		this.phone = phone;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	
	@Override
	public String toString() {
		return "Person [id=" + id + ", name=" + name + ", phone=" + phone
				+ ", address=" + address + "]";
	}
	

}

PersonData.Java

package com.Test.Challenge1;

import java.util.ArrayList;
import java.util.List;

public class PersonData {

	public static void main(String[] args) {
		PersonData personData = new PersonData();
		List<Person> persons = personData.addPersons(4);
		
		System.out.println(persons);
	}
//Method that returns person List size Based on the value passed i.e no.of persons
	private List<Person> addPersons(int noOfPersons) {
		List<Person> personList = new ArrayList<Person>();
		for (int i = 1; i <= noOfPersons; i++) {
			personList.add(new Person(i, "Test " + i, "980234986" + i,
					"Address " + i));
		}
		return personList;
	}

}
output:
[Person [id=1, name=Test 1, phone=9802349861, address=Address 1], Person [id=2, name=Test 2, phone=9802349862, address=Address 2], Person [id=3, name=Test 3, phone=9802349863, address=Address 3], Person [id=4, name=Test 4, phone=9802349864, address=Address 4]]

Example Using Database Connection

Person.java:

package com.Person.to;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="persondb")
public class Person {
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column
	private Integer pid;
	@Column
	private String pname;
	@Column
	private String phone;
	@Column
	private String address;
	public Employee() {
		
	}
	
	public Person(Integer pid, String pname, String phone, String address) {
	
		this.pid = pid;
		this.pname = pname;
		this.phone = phone;
		this.address = address;
	}

	public Integer getPid() {
		return pid;
	}
	public void setPid(Integer pid) {
		this.pid = pid;
	}
	public String getPname() {
		return pname;
	}
	public void setPname(String pname) {
		this.pname = pname;
	}
	
	
	public String getPhone() {
		return phone;
	}
	public void setPhone(String phone) {
		this.phone = phone;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	@Override
	public String toString() {
		return "Person [pid=" + pid + ", pname=" + pname + ", phone=" + phone
				+ ", address=" + address + "]";
	}

}

HibernateApp.java:

package com.Person.to;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class HibernateApp {

	public static void main(String[] args) {

		Session session = getConnection();
		List<Person> results = getPersons(session);
		System.out.println(results);
    	session.close();
	}

	private static List<Person> getPersons(Session session) {
		//HQL query for reterving Data from Person table
		String hql = "FROM Person";
		org.hibernate.Query query = session.createQuery(hql);
		List<Person> results = query.list();
		return results;
	}
	private static Session getConnection() {
		Configuration config = new Configuration();
		config.configure("hibernate.cfg.xml");
		SessionFactory sessionfactory = config.buildSessionFactory();
		Session session = sessionfactory.openSession();
		return session;
	}

}
hibernate.cfg.xml:
<?xml version="1.0" encoding="UTF-8"?>
<hibernate-configuration>
	<session-factory>
		
		<property name="connection.driver_class">com.mysql.jdbc.Driver</property>
		<property name="connection.url">jdbc:mysql://127.0.0.1:3306/myschema</property>
		<property name="connection.username">userid</property>
		<property name="connection.password">pswd</property>
		<property name="dialect">org.hibernate.dialect.MySQLDialect</property>
		<property name="show_sql">false</property>
		<mapping class="com.Person.to.Person" ></mapping>
	</session-factory>
</hibernate-configuration>

Output:
[Person [id=1, name=Test 1, phone=9802349861, address=Address 1], Person [id=2, name=Test 2, phone=9802349862, address=Address 2], Person [id=3, name=Test 3, phone=9802349863, address=Address 3], Person [id=4, name=Test 4, phone=9802349864, address=Address 4]]
